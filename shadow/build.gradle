plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'maven'
}

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "0.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation 'androidx.annotation:annotation:1.2.0'

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

android.libraryVariants.all { variant ->
    Task javaCompilerTask = variant.javaCompiler
    javaCompilerTask.doLast {
        javaCompilerTask.getOutputs().files.each { classDir ->
            println("javaCompilerTask.outputs=$classDir")
            removeClass(
                    classDir,
                    'android.os.ServiceManager',
                    'android.os.ServiceManager$ServiceNotFoundException'
            )
//            removeClassByPackageNames(classDir, "android.shadow.")
        }
    }
}

def removeClassByPackageNames(File classDir, String... packageNames) {
    if (packageNames == null || packageNames.size() == 0) {
        return
    }

    final char dot = '.'
    for (String packageName : packageNames) {
        def packageNamePath = packageName.replace(dot, File.separatorChar)
        File packageNameDir = new File(classDir, packageNamePath)
        packageNameDir.deleteDir()
    }
}

def removeClass(File classDir, String... classes) {
    if (classes == null || classes.size() == 0) {
        return
    }

    final char dot = '.'
    for (String className : classes) {
        def classNamePath = className.replace(dot, File.separatorChar) + ".class"
        File classFile = new File(classDir, classNamePath)
        println("className=$className, classNamePath=$classNamePath")

        def result = classFile.delete()
        println("${result ? "success" : "fail"} delete className=${className} in classDir=$classDir")
    }
}

group = 'com.coofee'
version = '0.0.1'

repositories {
//    maven { url 'https://maven.aliyun.com/repository/google' }
//    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url "https://jitpack.io" }
    google()
    mavenCentral()
}

afterEvaluate {
    publish.dependsOn assembleRelease
    publish.mustRunAfter assembleRelease

    publishToMavenLocal.dependsOn assembleRelease
    publishToMavenLocal.mustRunAfter assembleRelease

    publishing {

//        repositories {
//            maven {
//                url "${MAVEN_URL}"
//                credentials {
//                    username MAVEN_USERNAME
//                    password MAVEN_PASSWORD
//                }
//            }
//        }

        publications {

            aar(MavenPublication) {
                from components.release

                groupId project.group
                artifactId project.name.toLowerCase()
                version project.version

//                artifact file("$buildDir/outputs/aar/${project.name}-release.aar")

//                pom.withXml(createPomDependencies(["implementation"]))
            }
        }
    }
}

//uploadArchives {
//    repositories.mavenDeployer {
//        repository(url: uri("${MAVEN_URL}")) {
//            authentication(userName: MAVEN_USERNAME, password: MAVEN_PASSWORD)
//        }
//
//        pom.groupId = project.group
//        pom.artifactId = project.name.toLowerCase()
//        pom.version = project.version
//    }
//}
//
// The publications doesn't know about our AAR dependencies, so we have to manually add them to the pom
// Credit: http://stackoverflow.com/questions/24743562/gradle-not-including-dependencies-in-published-pom-xml
//def createPomDependencies(configurationNames) {
//    return {
//        def dependenciesNode = asNode().appendNode('dependencies')
//        configurationNames.each { configurationName ->
//            configurations[configurationName].allDependencies.each {
//                if (it.group != null && it.name != null) {
//                    def dependencyNode = dependenciesNode.appendNode('dependency')
//                    dependencyNode.appendNode('groupId', it.group)
//                    dependencyNode.appendNode('artifactId', it.name)
//                    dependencyNode.appendNode('version', it.version)
//
//                    //If there are any exclusions in dependency
//                    if (it.excludeRules.size() > 0) {
//                        def exclusionsNode = dependencyNode.appendNode('exclusions')
//                        it.excludeRules.each { rule ->
//                            def exclusionNode = exclusionsNode.appendNode('exclusion')
//                            exclusionNode.appendNode('groupId', rule.group)
//                            exclusionNode.appendNode('artifactId', rule.module)
//                        }
//                    }
//                }
//            }
//        }
//    }
//}
